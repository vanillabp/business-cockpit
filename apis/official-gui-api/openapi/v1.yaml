openapi: 3.0.0
info:
  description: Official GUI API
  version: '1.0'
  title: gui
servers:
  - url: /gui/api/v1

security:
  - JWT: []

paths:
  /usertask/mark-as-read:
    patch:
      tags:
        - officialTasklist
      summary: mark tasks as read or unread
      operationId: markTasksAsRead
      parameters:
        - in: query
          name: unread
          required: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskIds"
      responses:
        200:
          description: Usertask changed successfully
        404:
          description: User task is unknown
  /usertask/{userTaskId}/mark-as-read:
    patch:
      tags:
        - officialTasklist
      summary: mark a task as read or unread
      operationId: markTaskAsRead
      parameters:
        - in: path
          name: userTaskId
          required: true
          schema:
            type: string
        - in: query
          name: unread
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Usertask changed successfully
        404:
          description: User task is unknown
  /usertask/assign:
    patch:
      tags:
        - officialTasklist
      summary: assign or unassign tasks to a user
      operationId: assignTasks
      parameters:
        - in: query
          name: unassign
          required: false
          schema:
            type: boolean
        - in: query
          name: userId
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskIds"
      responses:
        200:
          description: Usertask changed successfully
        404:
          description: User task is unknown
  /usertask/{userTaskId}/assign:
    patch:
      tags:
        - officialTasklist
      summary: assign or unassign a task to a user
      operationId: assignTask
      parameters:
        - in: path
          name: userTaskId
          required: true
          schema:
            type: string
        - in: query
          name: unassign
          required: false
          schema:
            type: boolean
        - in: query
          name: userId
          required: false
          schema:
            type: string
      responses:
        200:
          description: Usertask changed successfully
        404:
          description: User task is unknown
  /usertask/claim:
    patch:
      tags:
        - officialTasklist
      summary: claim or unclaim tasks to the current user
      operationId: claimTasks
      parameters:
        - in: query
          name: unclaim
          required: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTaskIds"
      responses:
        200:
          description: Usertask changed successfully
        404:
          description: User task is unknown
  /usertask/{userTaskId}/claim:
    patch:
      tags:
        - officialTasklist
      summary: claim or unclaim a task to the current user
      operationId: claimTask
      parameters:
        - in: path
          name: userTaskId
          required: true
          schema:
            type: string
        - in: query
          name: unclaim
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Usertask changed successfully
        404:
          description: User task is unknown
  /usertask/{userTaskId}:
    get:
      tags:
        - officialTasklist
      summary: Fetch data of one single User task
      operationId: getUserTask
      parameters:
        - in: path
          name: userTaskId
          required: true
          schema:
            type: string
        - in: query
          name: markAsRead
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Users task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTask'
        404:
          description: Unknown user task
  /usertask:
    post:
      tags:
        - officialTasklist
      summary: User tasks to be shown in a list view
      operationId: getUserTasks
      parameters:
        - in: query
          name: initialTimestamp
          schema:
            type: string
            format: date-time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTasksRequest"
      responses:
        200:
          description: Users tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTasks'
    options:
      tags:
        - officialTasklist
      summary: Kwic results over user tasks
      operationId: getUserTaskKwicResults
      parameters:
        - in: query
          name: initialTimestamp
          schema:
            type: string
            format: date-time
        - in: query
          name: path
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KwicRequest"
      responses:
        200:
          description: Workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KwicResults'
    put:
      tags:
        - officialTasklist
      summary: Updated list of usertasks
      operationId: getUserTasksUpdate
      parameters:
        - in: query
          name: initialTimestamp
          schema:
            type: string
            format: date-time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTasksUpdateRequest"
      responses:
        200:
          description: Users tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTasks'
  /user:
    post:
      tags:
        - officialTasklist
      summary: Find users
      operationId: findUsers
      parameters:
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        200:
          description: Users tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResult'
  /workflow/{workflowId}/usertasks:
    post:
      tags:
        - officialWorkflowlist
      summary: Fetch usertasks for the workflow
      operationId: getUserTasksOfWorkflow
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            type: string
        - in: query
          name: llatcup
          required: true
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTasksRequest"
      responses:
        200:
          description: Workflow
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTask'
        404:
          description: Unknown workflow
  /workflow:
    post:
      tags:
        - officialWorkflowlist
      summary: Workflows to be shown in a list view
      operationId: getWorkflows
      parameters:
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: initialTimestamp
          schema:
            type: string
            format: date-time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowsRequest"
      responses:
        200:
          description: Workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflows'
    options:
      tags:
        - officialWorkflowlist
      summary: Kwic results over workflow items
      operationId: getKwicResults
      parameters:
        - in: query
          name: initialTimestamp
          schema:
            type: string
            format: date-time
        - in: query
          name: path
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KwicRequest"
      responses:
        200:
          description: Workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KwicResults'
    put:
      tags:
        - officialWorkflowlist
      summary: Updated list of workflows
      operationId: getWorkflowsUpdate
      parameters:
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: initialTimestamp
          schema:
            type: string
            format: date-time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowsUpdateRequest"
      responses:
        200:
          description: Users tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflows'
  /workflow/{workflowId}:
      get:
        tags:
          - officialWorkflowlist
        summary: Fetch data of one single workflow
        operationId: getWorkflow
        parameters:
          - in: path
            name: workflowId
            required: true
            schema:
              type: string
        responses:
          200:
            description: Workflow
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Workflow'
          404:
            description: Unknown workflow
  /workflow-module/{workflowModuleId}:
    get:
      tags:
        - officialWorkflowModules
      summary: Fetch permitted workflow module
      operationId: getWorkflowModule
      parameters:
          - in: path
            name: workflowModuleId
            required: true
            schema:
              type: string
      responses:
        200:
          description: Workflow Module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowModule'
        404:
          description: Unknown workflow module
  /workflow-module:
    get:
      tags:
        - officialWorkflowModules
      summary: Fetch permitted workflow modules
      operationId: getWorkflowModules
      responses:
        200:
          description: Workflow Modules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowModules'
components:
  schemas:
    ValidationErrors:
      type: object
      additionalProperties: {}
    Group:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        display:
          type: string
        details:
          type: object
          additionalProperties: true
    Person:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        display:
          type: string
        displayShort:
          type: string
        email:
          type: string
        avatar:
          type: integer
          format: int32
        details:
          type: object
          additionalProperties: true
    UserSearchResult:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    UiUriType:
      type: string
      enum:
      - EXTERNAL
      - WEBPACK_MF_REACT  # MF ... Module Federation
      - NF_NG  # Native federation
    SearchQuery:
      type: object
      required:
        - query # missing path means "fulltext"
      properties:
        path:
          type: string
        query:
          type: string
        caseInsensitive:
          type: boolean
    UserTaskIds:
      type: object
      properties:
        userTaskIds:
          type: array
          items:
            type: string
    UserTask:
      type: object
      required:
      - id
      - createdAt
      - updatedAt
      - workflowModuleId
      - bpmnProcessId
      - taskDefinition
      - title
      - workflowModuleUri
      - uiUri
      - uiUriType
      properties:
        id:
          type: string
          description: user task id
          example: Has to be unique across all reporting systems
        version:
          type: integer
          format: int32
          description: revision of the usertask record
        initiator:
          type: string
          description: The user who triggered the update. Null if the update is done by the system.
        createdAt:
          type: string
          format: date-time
          description: The time the task was created
          example: 2019-05-21T13:30:26.202Z
        updatedAt:
          type: string
          format: date-time
          description: The time the task was updated
          example: 2019-05-21T13:30:26.202Z
        endedAt:
          type: string
          format: date-time
          description: The time the task was ended
          example: 2019-05-21T13:30:26.202Z
        workflowModuleId:
          type: string
          description: The workflow module of this usertask
        comment:
          type: string
          example: A comment describing the status. Is interpreted in the context of the event. E.g. the reason which caused CANCELLATION
        bpmnProcessId:
          type: string
          description: BPMN process ID
          example: taxi-ride
        bpmnProcessVersion:
          type: string
          description: Version of the BPMN process
        workflowTitle:
          type: object
          description: BPMN process title
          additionalProperties:
            type: string
          example:
            en: Taxi Ride
            de: Taxifahrt
        workflowId:
          type: string
          description: The unique key of the workflow
          example: c26f4d10-a7a7-44e5-97ed-cbfd06e760e1
        businessId:
          type: string
          description: The natural ID of the workflow (e.g. order-id)
          example: 123456
        title:
          type: object
          description: The rendered title of the user-task (may contain specific data)
          additionalProperties:
            type: string
          example:
            en: "Do ride #4711"
            de: "Führe die Fahrt #4711 durch"
        bpmnTaskId:
          type: string
          description: The BPMN user task's ID
          example: "Task_TaxiRide"
        taskDefinition:
          type: string
          description: The task's formkey
          example: "DoRideForm"
        taskDefinitionTitle:
          type: object
          description: The generic title of the user-task (must not contain specific data)
          additionalProperties:
            type: string
          example:
            en: Do ride
            de: Führe die Fahrt durch
        uiUri:
          type: string
          description: An URI as an entrypoint URI for UI components. Maybe a technical URL (e.g. for WEBPACK) or an URL targeting a human readable form (e.g. EXTERNAL)
          example: http://localhost:8080/wm/what-ever/remoteEntry.js
        uiUriType:
          $ref: '#/components/schemas/UiUriType'
        workflowModuleUri:
          type: string
          description: An URI pointing to the workflow-module's own API (maybe used by user-task forms)
          example: http://localhost:8080/wm/what-ever/
        assignee:
          $ref: '#/components/schemas/Person'
        candidateUsers:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          example: []
        candidateGroups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          example: [ "drivers" ]
        dueDate:
          type: string
          format: date-time
          example: 2020-05-21T13:30:26.202Z
        followUpDate:
          type: string
          format: date-time
          example: null
        details:
          type: object
          description: Properties for individual searches
          additionalProperties: true
          example: "{ 'customer': 'passanger A' }"
        detailsFulltextSearch:
          type: string
          description: List of words for fulltext searching details
        read:
          type: string
          format: date-time
          example: 2020-05-21T13:30:26.202Z
    UserTaskEvent:
      type: object
      required:
        - id
        - name
        - type
      properties:
        type:
          type: string
        name:
          type: string
        id:
          type: string
    Workflow:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - workflowModuleId
        - bpmnProcessId
        - title
        - workflowModuleUri
        - uiUri
        - uiUriType
      properties:
        id:
          type: string
          description: workflow id
          example: Has to be unique across all reporting systems
        version:
          type: integer
          format: int32
          description: revision of the usertask record
        initiator:
          $ref: '#/components/schemas/Person'
        createdAt:
          type: string
          format: date-time
          description: The time the task was created
          example: 2019-05-21T13:30:26.202Z
        updatedAt:
          type: string
          format: date-time
          description: The time the task was updated
          example: 2019-05-21T13:30:26.202Z
        endedAt:
          type: string
          format: date-time
          description: The time the task was ended
          example: 2019-05-21T13:30:26.202Z
        workflowModuleId:
          type: string
          description: The workflow module of this usertask
        comment:
          type: string
          example: A comment describing the status. Is interpreted in the context of the event. E.g. the reason which caused CANCELLATION
        bpmnProcessId:
          type: string
          description: BPMN process ID
          example: taxi-ride
        bpmnProcessVersion:
          type: string
          description: Version of the BPMN process and tag
        businessId:
          type: string
          description: The natural ID of the workflow (e.g. order-id)
          example: 123456
        title:
          type: object
          description: The rendered title of the user-task (may contain specific data)
          additionalProperties:
            type: string
          example:
            en: "Do ride #4711"
            de: "Führe die Fahrt #4711 durch"
        uiUri:
          type: string
          description: An URI as an entrypoint URI for UI components. Maybe a technical URL (e.g. for WEBPACK) or an URL targeting a human readable form (e.g. EXTERNAL)
          example: http://localhost:8080/wm/what-ever/remoteEntry.js
        uiUriType:
          $ref: '#/components/schemas/UiUriType'
        workflowModuleUri:
          type: string
          description: An URI pointing to the workflow-modules's own API (maybe used by workflow pages)
          example: http://localhost:8080/wm/what-ever/
        accessibleToUsers:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          example: []
        accessibleToGroups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          example: [ "drivers" ]
        details:
          type: object
          description: Properties for individual searches
          additionalProperties: true
          example: "{ 'customer': 'passanger A' }"
        detailsFulltextSearch:
          type: string
          description: List of words for fulltext searching details
    WorkflowEvent:
      type: object
      required:
        - id
        - name
        - type
      properties:
        type:
          type: string
        name:
          type: string
        id:
          type: string
    Page:
      type: object
      required:
        - totalElements
        - totalPages
        - number
        - size
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
    UserTaskRetrieveMode:
      type: string
      enum:
        - All
        - OpenTasks
        - OpenTasksWithoutFollowUp
        - OpenTasksWithFollowUp
        - ClosedTasksOnly
    UserTasksRequest:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        query:
          type: string
        searchQueries:
          type: array
          items:
            $ref: '#/components/schemas/SearchQuery'
        sort:
          type: string
        sortAscending:
          type: boolean
        mode:
          $ref: '#/components/schemas/UserTaskRetrieveMode'
    UserTasks:
      type: object
      required:
        - serverTimestamp
        - page
        - userTasks
      properties:
        serverTimestamp:
          type: string
          format: date-time
        page:
          $ref: '#/components/schemas/Page'
        userTasks:
          type: array
          items:
            $ref: '#/components/schemas/UserTask'
    UserTasksUpdateRequest:
      type: object
      required:
        - size
        - knownUserTasksIds
      properties:
        size:
          type: integer
          format: int32
        query:
          type: string
        searchQueries:
          type: array
          items:
            $ref: '#/components/schemas/SearchQuery'
        sort:
          type: string
        sortAscending:
          type: boolean
        knownUserTasksIds:
          type: array
          items:
            type: string
    WorkflowsRequest:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        searchQueries:
          type: array
          items:
            $ref: '#/components/schemas/SearchQuery'
        sort:
          type: string
        sortAscending:
          type: boolean
    Workflows:
      type: object
      required:
        - serverTimestamp
        - page
        - workflows
      properties:
        requestId:
          type: string
        serverTimestamp:
          type: string
          format: date-time
        page:
          $ref: '#/components/schemas/Page'
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
    WorkflowsUpdateRequest:
      type: object
      required:
        - size
        - knownWorkflowsIds
      properties:
        size:
          type: integer
          format: int32
        knownWorkflowsIds:
          type: array
          items:
            type: string
        searchQueries:
          type: array
          items:
            $ref: '#/components/schemas/SearchQuery'
        sort:
          type: string
        sortAscending:
          type: boolean
    KwicRequest:
      type: object
      properties:
        searchQueries:
          type: array
          items:
            $ref: '#/components/schemas/SearchQuery'
    KwicResult:
      type: object
      required:
        - item
        - count
      properties:
        item:
          type: string
        count:
          type: integer
          format: int32
    KwicResults:
      type: object
      required:
        - result
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/KwicResult'
    WorkflowModule:
      type: object
      required:
        - id
        - version
        - uri
      properties:
        id:
          type: string
        version:
          type: integer
          format: int64
        uri:
          type: string
    WorkflowModules:
      type: object
      required:
        - modules
      properties:
        modules:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowModule'
